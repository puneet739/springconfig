spring:
  profiles: production
  application:
    name: Gateway-self
  metrics:
    servo:
      enabled: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

management:
  endpoints:
    enabled-by-default: true
    web:
      base-path: '/'
      exposure:
        include: routes,filters,info,health,prometheus,metrics
    prometheus:
      enabled: true
puneet:
  testconfig: Puneet is here

eureka:
  datacenter: cloud
  name: eureka
  #https://github.com/spring-cloud/spring-cloud-netflix/issues/1816
  #asgName: EurekaEIPASG
  shouldUseDns: true
  server:
    port: 8093
    preferSameZone: false
    enable-self-preservation: false
  instance:
    hostname: localhost
    preferIpAddress: true
    instanceId: ${spring.application.name}-${HOSTNAME}
    metadataMap:
      instanceId: ${spring.application.name}-${HOSTNAME}
      enableRegisterFilter: "false"
  client:
    #choose true for cluster case, so that cluster will keep receiving heartbeats and some false alarms will not be raised
    registerWithEureka: true
    eurekaServerPort: 80
    #This must be true for DNS based configuration
    useDnsForFetchingServiceUrls: true
    #This is the suffix added to the DNS requests, so must match the records you create
    eurekaServerDNSName: eurekagw-local.aws.athenahealth.com
    #This is the url added to the servers returned from DNS. e.g. eurekagw.aws.athenahealth.com will become  http://eurekagw.aws.athenahealth.com/eureka
    eurekaServerURLContext: gateway/eureka
    region: us-east-1
    fetchRegistry: true
    availabilityZones:
      us-east-1: us-east-1a,us-east-1b,us-east-1c,us-east-1d
      us-west-2: us-west-2a,us-west-2b,us-west-2c,us-west-2d


zuul:
  set-content-length: true
  retryable: true
  decodeUrl: false
  forward-to-green-connect-timeout: 15  
  host:
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000
  server:
    port: 8093
  eureka:
    datacenter: cloud
    hostname: localhost
    instance:
      preferIpAddress: true
      instanceId: ${spring.application.name}-${HOSTNAME}
      metadataMap:
        instanceId: ${spring.application.name}-${HOSTNAME}
    client:
      registerWithEureka: true
      #This is the port added to the servers returned from DNS.
      eurekaServerPort: 80
      #For DNS based matching
      useDnsForFetchingServiceUrls: true
      #the suffix added to the DNS requests, so must match the records you create, we override it  from sfn script
      eurekaServerDNSName: eurekagw-local.aws.athenahealth.com
      #this is the url added to the servers returned from DNS.
      eurekaServerURLContext: gateway/eureka
      region: us-east-1
      availabilityZones:
        us-east-1: us-east-1a,us-east-1b,us-east-1c,us-east-1d
        us-west-2: us-west-2a,us-west-2b,us-west-2c,us-west-2d
  sensitiveHeaders:
  routes:
    gateway:
      path: /gateway/**
      url: http://${eureka.instance.hostname}:${server.port}
    gateway-green:
      path: /gateway-green/**
      url: http://${eureka.instance.hostname}:${server.port}
    iam:
      path: /iam/**
      url: http://iams_auth:20020
server:
  port: 8093
  #not releavant as nginx is allowing only 8kb
  max-http-header-size: 32768
  tomcat:
    max-http-post-size: 10485760

ribbon:
  ConnectTimeout: 1000
  ReadTimeout: 120000
  ServerListRefreshInterval: 5000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1

#WE CAN DEFINE SERVICE SPECIFIC TIMEOUTS BY CHANGING 'default' to 'routeId' OF A SERVICE
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 270000
      circuitBreaker:
        enabled:  true
        sleepWindowInMilliseconds: 5000
        errorThresholdPercentage: 50
      fallback:
        enabled: true

#not required or used
turbine:
  aggregator:
    clusterConfig: GATEWAY
  appConfig: GATEWAY

logging:
  level:
    com.athena.gateway: INFO
    com.netflix.hystrix.AbstractCommand: INFO
    org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand: ERROR
    #for printing the ribbonResponse IP to which the request is routed
    org.springframework.cloud.netflix.ribbon.RibbonLoadBalancedRetryPolicy: DEBUG
    com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl: WARN
    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: WARN
    com.netflix.turbine.discovery.InstanceObservable: WARN
    #this generates a lot of log lines but the info is needed for debug at later point
    com.netflix.eureka.registry.AbstractInstanceRegistry: INFO
    com.netflix.zuul.http.HttpServletRequestWrapper: ERROR


